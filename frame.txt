구조화

cart = []
btnDOM = []


[class1 : 제품 데이터 가져오기]
  (데이터 구조 단순화, 필요한 데이터 추출)


[class2 : 화면]
  [2-1. 가져온 제품 데이터 모두 화면에 그리기]
    -3-1 아이템 데이터 저장
  
  [2-2. 버튼클릭핸들]
    -btnDOM 업데이트
    -버튼 클릭하면
      ㄴ새로운 아이템 가져오기 : 3-2
      ㄴcart 업데이트: 기존 내용 + 3-2 
      ㄴ카트 값 업데이트
      ㄴ카트에 추가한 아이템 그려주기
      ㄴ3-3 카트 내 아이템 - 카트 키에 저장
      ㄴ카트 창 열기


    [btnDOM 업데이트]
    : btnDOM 중에서 cart 내 아이템의 id와 같은 id를 찾을 수 있는 경우와, 
      그렇지 않은 경우를 구분해서 버튼 텍스트가 달라짐

    [카트에 추가한 아이템 그려주기]
      -해당 innerHTML 삽입
      -btnDOM 업데이트

    [카트 값(총갯수,총가격) 업데이트]
    [카트 창 열기]
    [카트 창 닫기]


  [2-3. 카트 내부 동작]
    클릭 이벤트 - 클릭한 것의 class에 따라 
      [삭제]
        -해당 아이템 그린 것 지우기
        -클릭한 아이템과 dataset id가 같지 않은 것만 filter해서 cart 업데이트
        -btnDOM 업데이트
      [갯수+1]
        -클릭한 아이콘의 id와 같은 id를 가진 cart 아이템을 찾아 amount 값 +1
         (e.target에서 amount로 가서 값 +1 (X) - 단순히 보이는 것만 수정하는 것임)
        -그 값을 innertext로 적용        
      [갯수-1]
        -클릭한 아이콘의 id와 같은 id를 가진 cart 아이템을 찾아 amount 값 -1
        -그 값을 innertext로 적용
        ㄴ만약 amount가 0이 되면 [삭제]
      (공통) 
      -3-3
      -카트 값 업데이트

    [클리어]
      -cart = [] 로 업데이트
      -카트 내 모든 아이템 그린거 없애기
      -3-3. 카트 내 아이템 저장
      -카트 값 업데이트
      -btnDOM 업데이트
      -카트 창 닫기
      

  [첫 로딩 시 셋업]
  -cart 배열 업데이트 with 3-4
  -cart 내 모든 아이템을 카트에 그려주기
  -카트 값 업데이트
  -카트 아이콘 누르면 카트 여는 동작
  -카트 닫기 누르면 카트 닫는 동작



[class3 : 로컬스토리지 관련]
  3-1. 아이템 데이터 - product키에 저장
  3-2. 아이템 데이터 불러오고, 클릭한 버튼의 id와 같은 id를 가진 아이템만 리턴
  3-3. 카트 내 아이템 - 카트 키에 저장
  3-4. 카트 내 아이템 불러오기 (★카트가 비어있을 경우도 고려해서)



DOMContentLoaded 되자마자 실행
  -첫 로딩 시 셋업

  [1 : 제품 데이터 가져오기]
  then [2-1. 가져온 제품 데이터 모두 화면에 그리기]
       [3-1. 아이템 데이터 - product키에 저장] 
  then [2-2. 버튼클릭핸들]
       [2-3. 카트 내부 동작]